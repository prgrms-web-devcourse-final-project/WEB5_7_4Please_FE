/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as SignupIndexRouteImport } from './routes/signup/index'
import { Route as RegisterProductIndexRouteImport } from './routes/registerProduct/index'
import { Route as ProductsIndexRouteImport } from './routes/products/index'
import { Route as PaymentIndexRouteImport } from './routes/payment/index'
import { Route as MypageIndexRouteImport } from './routes/mypage/index'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as indexIndexRouteImport } from './routes/(index)/index'
import { Route as ProductsIdRouteImport } from './routes/products/$id'
import { Route as PaymentSuccessIndexRouteImport } from './routes/payment/success/index'
import { Route as PaymentFailIndexRouteImport } from './routes/payment/fail/index'
import { Route as AuthNaverIndexRouteImport } from './routes/auth/naver/index'
import { Route as AuthGoogleIndexRouteImport } from './routes/auth/google/index'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const SignupIndexRoute = SignupIndexRouteImport.update({
  id: '/signup/',
  path: '/signup/',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterProductIndexRoute = RegisterProductIndexRouteImport.update({
  id: '/registerProduct/',
  path: '/registerProduct/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIndexRoute = ProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRouteImport,
} as any)
const PaymentIndexRoute = PaymentIndexRouteImport.update({
  id: '/payment/',
  path: '/payment/',
  getParentRoute: () => rootRouteImport,
} as any)
const MypageIndexRoute = MypageIndexRouteImport.update({
  id: '/mypage/',
  path: '/mypage/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LoginRoute,
} as any)
const indexIndexRoute = indexIndexRouteImport.update({
  id: '/(index)/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIdRoute = ProductsIdRouteImport.update({
  id: '/products/$id',
  path: '/products/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const PaymentSuccessIndexRoute = PaymentSuccessIndexRouteImport.update({
  id: '/payment/success/',
  path: '/payment/success/',
  getParentRoute: () => rootRouteImport,
} as any)
const PaymentFailIndexRoute = PaymentFailIndexRouteImport.update({
  id: '/payment/fail/',
  path: '/payment/fail/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthNaverIndexRoute = AuthNaverIndexRouteImport.update({
  id: '/auth/naver/',
  path: '/auth/naver/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthGoogleIndexRoute = AuthGoogleIndexRouteImport.update({
  id: '/auth/google/',
  path: '/auth/google/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRouteWithChildren
  '/products/$id': typeof ProductsIdRoute
  '/': typeof indexIndexRoute
  '/login/': typeof LoginIndexRoute
  '/mypage': typeof MypageIndexRoute
  '/payment': typeof PaymentIndexRoute
  '/products': typeof ProductsIndexRoute
  '/registerProduct': typeof RegisterProductIndexRoute
  '/signup': typeof SignupIndexRoute
  '/auth/google': typeof AuthGoogleIndexRoute
  '/auth/naver': typeof AuthNaverIndexRoute
  '/payment/fail': typeof PaymentFailIndexRoute
  '/payment/success': typeof PaymentSuccessIndexRoute
}
export interface FileRoutesByTo {
  '/products/$id': typeof ProductsIdRoute
  '/': typeof indexIndexRoute
  '/login': typeof LoginIndexRoute
  '/mypage': typeof MypageIndexRoute
  '/payment': typeof PaymentIndexRoute
  '/products': typeof ProductsIndexRoute
  '/registerProduct': typeof RegisterProductIndexRoute
  '/signup': typeof SignupIndexRoute
  '/auth/google': typeof AuthGoogleIndexRoute
  '/auth/naver': typeof AuthNaverIndexRoute
  '/payment/fail': typeof PaymentFailIndexRoute
  '/payment/success': typeof PaymentSuccessIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/login': typeof LoginRouteWithChildren
  '/products/$id': typeof ProductsIdRoute
  '/(index)/': typeof indexIndexRoute
  '/login/': typeof LoginIndexRoute
  '/mypage/': typeof MypageIndexRoute
  '/payment/': typeof PaymentIndexRoute
  '/products/': typeof ProductsIndexRoute
  '/registerProduct/': typeof RegisterProductIndexRoute
  '/signup/': typeof SignupIndexRoute
  '/auth/google/': typeof AuthGoogleIndexRoute
  '/auth/naver/': typeof AuthNaverIndexRoute
  '/payment/fail/': typeof PaymentFailIndexRoute
  '/payment/success/': typeof PaymentSuccessIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/products/$id'
    | '/'
    | '/login/'
    | '/mypage'
    | '/payment'
    | '/products'
    | '/registerProduct'
    | '/signup'
    | '/auth/google'
    | '/auth/naver'
    | '/payment/fail'
    | '/payment/success'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/products/$id'
    | '/'
    | '/login'
    | '/mypage'
    | '/payment'
    | '/products'
    | '/registerProduct'
    | '/signup'
    | '/auth/google'
    | '/auth/naver'
    | '/payment/fail'
    | '/payment/success'
  id:
    | '__root__'
    | '/login'
    | '/products/$id'
    | '/(index)/'
    | '/login/'
    | '/mypage/'
    | '/payment/'
    | '/products/'
    | '/registerProduct/'
    | '/signup/'
    | '/auth/google/'
    | '/auth/naver/'
    | '/payment/fail/'
    | '/payment/success/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LoginRoute: typeof LoginRouteWithChildren
  ProductsIdRoute: typeof ProductsIdRoute
  indexIndexRoute: typeof indexIndexRoute
  MypageIndexRoute: typeof MypageIndexRoute
  PaymentIndexRoute: typeof PaymentIndexRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
  RegisterProductIndexRoute: typeof RegisterProductIndexRoute
  SignupIndexRoute: typeof SignupIndexRoute
  AuthGoogleIndexRoute: typeof AuthGoogleIndexRoute
  AuthNaverIndexRoute: typeof AuthNaverIndexRoute
  PaymentFailIndexRoute: typeof PaymentFailIndexRoute
  PaymentSuccessIndexRoute: typeof PaymentSuccessIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signup/': {
      id: '/signup/'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/registerProduct/': {
      id: '/registerProduct/'
      path: '/registerProduct'
      fullPath: '/registerProduct'
      preLoaderRoute: typeof RegisterProductIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/payment/': {
      id: '/payment/'
      path: '/payment'
      fullPath: '/payment'
      preLoaderRoute: typeof PaymentIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/mypage/': {
      id: '/mypage/'
      path: '/mypage'
      fullPath: '/mypage'
      preLoaderRoute: typeof MypageIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/'
      fullPath: '/login/'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof LoginRoute
    }
    '/(index)/': {
      id: '/(index)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof indexIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/$id': {
      id: '/products/$id'
      path: '/products/$id'
      fullPath: '/products/$id'
      preLoaderRoute: typeof ProductsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/payment/success/': {
      id: '/payment/success/'
      path: '/payment/success'
      fullPath: '/payment/success'
      preLoaderRoute: typeof PaymentSuccessIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/payment/fail/': {
      id: '/payment/fail/'
      path: '/payment/fail'
      fullPath: '/payment/fail'
      preLoaderRoute: typeof PaymentFailIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/naver/': {
      id: '/auth/naver/'
      path: '/auth/naver'
      fullPath: '/auth/naver'
      preLoaderRoute: typeof AuthNaverIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/google/': {
      id: '/auth/google/'
      path: '/auth/google'
      fullPath: '/auth/google'
      preLoaderRoute: typeof AuthGoogleIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface LoginRouteChildren {
  LoginIndexRoute: typeof LoginIndexRoute
}

const LoginRouteChildren: LoginRouteChildren = {
  LoginIndexRoute: LoginIndexRoute,
}

const LoginRouteWithChildren = LoginRoute._addFileChildren(LoginRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LoginRoute: LoginRouteWithChildren,
  ProductsIdRoute: ProductsIdRoute,
  indexIndexRoute: indexIndexRoute,
  MypageIndexRoute: MypageIndexRoute,
  PaymentIndexRoute: PaymentIndexRoute,
  ProductsIndexRoute: ProductsIndexRoute,
  RegisterProductIndexRoute: RegisterProductIndexRoute,
  SignupIndexRoute: SignupIndexRoute,
  AuthGoogleIndexRoute: AuthGoogleIndexRoute,
  AuthNaverIndexRoute: AuthNaverIndexRoute,
  PaymentFailIndexRoute: PaymentFailIndexRoute,
  PaymentSuccessIndexRoute: PaymentSuccessIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
